#!/usr/bin/env python

# Generate lightcone for DESI mocks
# from HOD catalogues generated by Shadab

import argparse

from generate_lc import LC, Paths_LC
from foot_nz import FOOT_NZ


def lrg_cutsky_ABACUS(args):
	config_file = "./config_ABACUS_LRG.ini"
	input_name = "LRG_snap{}_ph000.gcat.sub{}.fits"

	######### Instances
	lc_instance = LC(config_file, args)
	foot_nz_instance = FOOT_NZ(config_file, args, galtype="lrg")

	######### CutSky 20
	for i in range(25):
		phase = str(int(i)).zfill(3)
		input_name = "LRG_snap{}_ph" + phase + ".gcat.sub{}.fits"

		in_part_path = "/z0.800/AbacusSummit_base_c000_ph{}/".format(phase)
		shells_path = "/z0.800/AbacusSummit_base_c000_ph{}/".format(phase)
		path_instance = Paths_LC(config_file, args, input_name, shells_path, in_part_path)

		lc_instance.generate_shells(path_instance, snapshot=20, cutsky=True, nproc=20, Nsubboxes=64)

		foot_nz_instance.shell(path_instance, nproc=64, fullfootprint=2, todo=2)
		foot_nz_instance.shell(path_instance, nproc=64, fullfootprint=0, todo=0)


def elg_cutsky_ABACUS(args):
	config_file = "./config_ABACUS_ELG.ini"

	######### Instances
	lc_instance = LC(config_file, args)
	foot_nz_instance = FOOT_NZ(config_file, args, galtype="elg")

	# ######### CutSky
	for i in range(1, 25):
		phase = str(int(i)).zfill(3)
		input_name = "ELGlowDens_snap{}_ph" + phase + ".gcat.sub{}.fits"

		shells_path = "/z1.100/AbacusSummit_base_c000_ph{}/".format(phase)
		in_part_path = "/z1.100/AbacusSummit_base_c000_ph{}/".format(phase)
		path_instance = Paths_LC(config_file, args, input_name, shells_path, in_part_path)

		lc_instance.generate_shells(path_instance, snapshot=16, cutsky=True, nproc=20, Nsubboxes=64)

		foot_nz_instance.shell(path_instance, nproc=64, fullfootprint=2, todo=2)
		foot_nz_instance.shell(path_instance, nproc=64, fullfootprint=0, todo=0)

	
def qso_cutsky_ABACUS(args):
	config_file = "./config_ABACUS_QSO.ini"

	######### Instances
	lc_instance = LC(config_file, args)
	foot_nz_instance = FOOT_NZ(config_file, args, galtype="qso")

	######### CutSky
	for i in range(13, 25):
		
		phase = str(int(i)).zfill(3)
		input_name = "QSO_snap{}_ph" + phase + ".gcat.sub{}.fits"

		shells_path = "/z1.400/AbacusSummit_base_c000_ph{}/".format(phase)
		in_part_path = "/z1.400/AbacusSummit_base_c000_ph{}/".format(phase)
		path_instance = Paths_LC(config_file, args, input_name, shells_path, in_part_path)

		lc_instance.generate_shells(path_instance, snapshot=12, cutsky=True, nproc=20, Nsubboxes=64)

		foot_nz_instance.shell(path_instance, nproc=64, fullfootprint=2, todo=2)
		foot_nz_instance.shell(path_instance, nproc=64, fullfootprint=0, todo=0)


def lrg_random_ABACUS(args):
	config_file = "./config_ABACUS_ran_LRG.ini"

	######### Instances
	lc_instance = LC(config_file, args)
	foot_nz_instance = FOOT_NZ(config_file, args, galtype="lrg")

	######### random 10x
	for i in range(1, 11):
		seed = str(i * 100)
		input_name = "LRG_snap{}_SB{}_S"+ seed +"_ph000.fits"

		in_part_path = "/ran_box/"
		shells_path = f"/LRG_ran_S{seed}_shells_ph000/"
		path_instance = Paths_LC(config_file, args, input_name, shells_path, in_part_path)

		lc_instance.generate_shells(path_instance, snapshot=20, cutsky=True, nproc=20, Nsubboxes=64)

		foot_nz_instance.shell(path_instance, nproc=64, fullfootprint=2, todo=2)
		foot_nz_instance.shell(path_instance, nproc=64, fullfootprint=0, todo=0)


def elg_random_ABACUS(args):
	config_file = "./config_ABACUS_ran_ELG.ini"

	######### Instances
	lc_instance = LC(config_file, args)
	foot_nz_instance = FOOT_NZ(config_file, args, galtype="elg")

	# ######### CutSky
	for i in range(1, 11):
		seed = str(i * 100)
		input_name = "ELGlowDens_snap{}_SB{}_S"+ seed +"_ph000.fits"

		in_part_path = "/ran_box/S"+ seed + "/"
		shells_path = f"/ELG_ran_S{seed}_shells_ph000/"
		path_instance = Paths_LC(config_file, args, input_name, shells_path, in_part_path)

		lc_instance.generate_shells(path_instance, snapshot=16, cutsky=True, nproc=20, Nsubboxes=64)

		foot_nz_instance.shell(path_instance, nproc=64, fullfootprint=2, todo=2)
		foot_nz_instance.shell(path_instance, nproc=64, fullfootprint=0, todo=0)


def qso_random_ABACUS(args):
	config_file = "./config_ABACUS_ran_QSO.ini"

	######### Instances
	lc_instance = LC(config_file, args)
	foot_nz_instance = FOOT_NZ(config_file, args, galtype="qso")

	######### random 10x
	for i in range(10, 11):
		seed = str(i * 100)
		input_name = "QSO_snap{}_SB{}_S"+ seed +"_ph000.fits"

		in_part_path = "/ran_box/"
		shells_path = f"/QSO_ran_S{seed}_shells_ph000/"
		path_instance = Paths_LC(config_file, args, input_name, shells_path, in_part_path)

		lc_instance.generate_shells(path_instance, snapshot=12, cutsky=True, nproc=20, Nsubboxes=64)

		foot_nz_instance.shell(path_instance, nproc=64, fullfootprint=2, todo=2)
		foot_nz_instance.shell(path_instance, nproc=64, fullfootprint=0, todo=0)


def main():
	parser = argparse.ArgumentParser()
	# parser.add_argument("config", help="ini file holding configuration", type=str)
	parser.add_argument("--dir_out", type=str, help="output directory (overrides config file)")
	parser.add_argument("--dir_gcat", type=str, help="input directory (same)")
	parser.add_argument("--input_name", type=str, help="name of input catalogs (same)")
	parser.add_argument("--lightcone_path", type=str, help="path of output catalogs (same)")
	args = parser.parse_args()
	# config_file = str(args.config) # config file

	# lrg_random_ABACUS(args)
	# elg_random_ABACUS(args)
	# qso_random_ABACUS(args)


	# lrg_cutsky_ABACUS(args)
	elg_cutsky_ABACUS(args)
	qso_cutsky_ABACUS(args)


	
if __name__ == '__main__':
	main()
