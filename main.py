#!/usr/bin/env python

# Generate lightcone for DESI mocks
# from HOD catalogues generated by Shadab

#import os
import argparse
#import time
#import tracemalloc
#import numpy as np
#from astropy.io import fits
#import h5py


from generate_lc import LC, Paths_LC
from foot_nz import FOOT_NZ

def lrg_LC(config_file, args):
	######### Lightcones
	input_name = "LRG_snap{}.gcat.sub{}.fits"

	shells_path = "/test/"

	path_instance = Paths_LC(config_file, args, input_name, shells_path)

	foot_nz_instance = FOOT_NZ(config_file, args, galtype="lrg")
	foot_nz_instance.shell(path_instance, nproc=15, fullfootprint=2, todo=0)


	# shells_path = "/LC_shells_sv3_nz_radecz_xyz_LRG/"

	# path_instance = Paths_LC(config_file, args, input_name, shells_path)
	# lc_instance = LC(config_file, args, galtype="lrg")
	# lc_instance.generate_shells(path_instance, snapshot=None, cutsky=False, nproc=10)

	# ######### CutSky
	# ### DATA	
	# shells_path = "/cutsky_shells_sv3_nz_radecz_xyz_LRG/"

	# path_instance = Paths_LC(config_file, args, input_name, shells_path)
	# lc_instance.generate_shells(path_instance, snapshot=98, cutsky=True, nproc=10)

def elg_LC(config_file, args):
	######### Lightcones
	input_name = "ELG_snap{}.gcat.sub{}.fits"
	shells_path = "/test/"

	path_instance = Paths_LC(config_file, args, input_name, shells_path)

	foot_nz_instance = FOOT_NZ(config_file, args, galtype="elg")
	foot_nz_instance.shell(path_instance, nproc=15, fullfootprint=2)

	# shells_path = "/LC_shells_sv3_nz_radecz_xyz_ELG/"

	# path_instance = Paths_LC(config_file, args, input_name, shells_path)
	# lc_instance = LC(config_file, args, galtype="elg")
	# lc_instance.generate_shells(path_instance, snapshot=None, cutsky=False, nproc=5)

	######### CutSky
	### DATA	
	# shells_path = "/cutsky_shells_sv3_nz_radecz_xyz_ELG/"

	# path_instance = Paths_LC(config_file, args, input_name, shells_path)
	# lc_instance.generate_shells(path_instance, snapshot=93, cutsky=True, nproc=8)

def main():
	parser = argparse.ArgumentParser()
	parser.add_argument("config", help="ini file holding configuration", type=str)
	parser.add_argument("--dir_out", type=str, help="output directory (overrides config file)")
	parser.add_argument("--dir_gcat", type=str, help="input directory (same)")
	parser.add_argument("--input_name", type=str, help="name of input catalogs (same)")
	parser.add_argument("--lightcone_path", type=str, help="path of output catalogs (same)")
	args = parser.parse_args()
	config_file = str(args.config) # config file

	# elg_LC(config_file, args)
	lrg_LC(config_file, args)
	

if __name__ == '__main__':
	main()
