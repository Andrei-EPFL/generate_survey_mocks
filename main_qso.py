#!/usr/bin/env python

# Generate lightcone for DESI mocks
# from HOD catalogues generated by Shadab

#import os
import argparse
#import time
#import tracemalloc
#import numpy as np
#from astropy.io import fits
#import h5py

# from DESILCclass import DESILC
# from UNITLCclass import UNITLC, combine_shells, Paths

from generate_lc import LC, Paths_LC
from foot_nz import FOOT_NZ



def qso_LC_ABACUS(args):
	config_file = "./config_ABACUS_QSO.ini"
	input_name = "QSO_snap{}.gcat.sub{}.fits"

	######### Lightcones
	shells_path = "/LC_shells_sv3_nz_radecz_xyz_QSO_h5py/"
	path_instance = Paths_LC(config_file, args, input_name, shells_path)

	# lc_instance = LC(config_file, args)
	# lc_instance.generate_shells(path_instance, snapshot=None, cutsky=False, nproc=20, Nsubboxes=64)

	foot_nz_instance = FOOT_NZ(config_file, args, galtype="qso")
	# foot_nz_instance.shell(path_instance, nproc=10, fullfootprint=2, todo=2)
	# foot_nz_instance.shell(path_instance, nproc=10, fullfootprint=0, todo=0)
	
	# ######### CutSky
	# shells_path = "/cutsky_shells_sv3_nz_radecz_xyz_QSO_h5py/"
	# path_instance = Paths_LC(config_file, args, input_name, shells_path)

	# # lc_instance.generate_shells(path_instance, snapshot=11, cutsky=True, nproc=20, Nsubboxes=64)

	# foot_nz_instance.shell(path_instance, nproc=10, fullfootprint=2, todo=2)
	# foot_nz_instance.shell(path_instance, nproc=10, fullfootprint=0, todo=0)

	######### Random CutSky
	for i in range(10):
		shells_path = f"/ran_{i+1}_cutsky_shells_sv3_nz_radecz_xyz_QSO_h5py/"
		path_instance = Paths_LC(config_file, args, input_name, shells_path)
		
		# lc_instance.generate_shells(path_instance, snapshot=11, cutsky=True, nproc=20, random=i+1, Nsubboxes=64)
	
	
		foot_nz_instance.shell(path_instance, nproc=10, fullfootprint=2, todo=2)
		foot_nz_instance.shell(path_instance, nproc=10, fullfootprint=0, todo=0)


def main():
	parser = argparse.ArgumentParser()
	# parser.add_argument("config", help="ini file holding configuration", type=str)
	parser.add_argument("--dir_out", type=str, help="output directory (overrides config file)")
	parser.add_argument("--dir_gcat", type=str, help="input directory (same)")
	parser.add_argument("--input_name", type=str, help="name of input catalogs (same)")
	parser.add_argument("--lightcone_path", type=str, help="path of output catalogs (same)")
	args = parser.parse_args()
	# config_file = str(args.config) # config file

	qso_LC_ABACUS(args)


if __name__ == '__main__':
	main()
